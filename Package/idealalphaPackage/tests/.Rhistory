postfalse <- 0.05
test <- "t-test"
alternative <- "greater"
type <- "one.sample"
ac <- alphaConfirmation(n, effsize, prior, posttrue, test = test, alternative = alternative, type = type)
ad <- alphaDisconfirmation(n, effsize, prior, postfalse, test = test, alternative = alternative, type = type)
pp <- probpower(effsize, prior, postfalse, posttrue, test = test, alternative = alternative, type = type)
ia <- idealalpha(n, effsize, prior, test = test, alternative = alternative, type = type)
pp
ia
n <- 5
effsize <- 0.2
prior <- 0.5
posttrue <- 0.8
postfalse <- 0.2
test <- "anova"
alternative <- "greater"
type <- "one.sample"
ac <- alphaConfirmation(n, effsize, prior, posttrue, test = test, alternative = alternative, type = type)
ad <- alphaDisconfirmation(n, effsize, prior, postfalse, test = test, alternative = alternative, type = type)
pp <- probpower(effsize, prior, postfalse, posttrue, test = test, alternative = alternative, type = type)
ia <- idealalpha(n, effsize, prior, test = test, alternative = alternative, type = type)
pp
n <- 20
effsize <- 0.2
prior <- 0.5
posttrue <- 0.8
postfalse <- 0.2
test <- "anova"
alternative <- "greater"
type <- "one.sample"
ac <- alphaConfirmation(n, effsize, prior, posttrue, test = test, alternative = alternative, type = type)
ac
ad <- alphaDisconfirmation(n, effsize, prior, postfalse, test = test, alternative = alternative, type = type)
ad
ia <- idealalpha(n, effsize, prior, test = test, alternative = alternative, type = type)
ia
n <- 20
effsize <- 0.2
prior <- 0.2
posttrue <- 0.3
postfalse <- 0.1
test <- "anova"
alternative <- "greater"
type <- "one.sample"
ac <- alphaConfirmation(n, effsize, prior, posttrue, test = test, alternative = alternative, type = type)
ad <- alphaDisconfirmation(n, effsize, prior, postfalse, test = test, alternative = alternative, type = type)
pp <- probpower(effsize, prior, postfalse, posttrue, test = test, alternative = alternative, type = type)
ia <- idealalpha(n, effsize, prior, test = test, alternative = alternative, type = type)
expect_equal(round(postConfirm(ac$power,ac$alpha,  prior), digits = 1), posttrue)
expect_equal(round(postDisconfirm(ad$power, ad$alpha, prior), digits =1), postfalse)
expect_equal(round(postConfirm(pp$power,pp$alpha,  prior), digits =1), posttrue)
expect_equal(round(postDisconfirm(pp$power,pp$alpha,  prior), digits =1), postfalse)
expect_equal(round(information(postConfirm(ia$power, ia$alpha, prior),postDisconfirm(ia$power, ia$alpha, prior),ia$power, ia$alpha, prior),2), round(ia$Learning, digits = 2))
pp
n <- 100
effsize <- 0.2
prior <- 0.2
posttrue <- 0.3
postfalse <- 0.1
test <- "anova"
alternative <- "greater"
type <- "one.sample"
ac <- alphaConfirmation(n, effsize, prior, posttrue, test = test, alternative = alternative, type = type)
ad <- alphaDisconfirmation(n, effsize, prior, postfalse, test = test, alternative = alternative, type = type)
pp <- probpower(effsize, prior, postfalse, posttrue, test = test, alternative = alternative, type = type)
ia <- idealalpha(n, effsize, prior, test = test, alternative = alternative, type = type)
expect_equal(round(postConfirm(ac$power,ac$alpha,  prior), digits = 1), posttrue)
expect_equal(round(postDisconfirm(ad$power, ad$alpha, prior), digits =1), postfalse)
expect_equal(round(postConfirm(pp$power,pp$alpha,  prior), digits =1), posttrue)
expect_equal(round(postDisconfirm(pp$power,pp$alpha,  prior), digits =1), postfalse)
expect_equal(round(information(postConfirm(ia$power, ia$alpha, prior),postDisconfirm(ia$power, ia$alpha, prior),ia$power, ia$alpha, prior),2), round(ia$Learning, digits = 2))
n <- 100
effsize <- 0.2
prior <- 0.2
posttrue <- 0.3
postfalse <- 0.1
test <- "anova"
alternative <- "greater"
type <- "one.sample"
ac <- alphaConfirmation(n, effsize, prior, posttrue, test = test, alternative = alternative, type = type)
ad <- alphaDisconfirmation(n, effsize, prior, postfalse, test = test, alternative = alternative, type = type)
n <- 100
effsize <- 0.2
prior <- 0.2
posttrue <- 0.3
postfalse <- 0.1
test <- "anova"
alternative <- "greater"
type <- "one.sample"
ac <- alphaConfirmation(n, effsize, prior, posttrue, test = test, alternative = alternative, type = type)
ad <- alphaDisconfirmation(n, effsize, prior, postfalse, test = test, alternative = alternative, type = type)
devtools::load_all()
n <- 100
effsize <- 0.2
prior <- 0.2
posttrue <- 0.3
postfalse <- 0.1
test <- "anova"
alternative <- "greater"
type <- "one.sample"
ac <- alphaConfirmation(n, effsize, prior, posttrue, test = test, alternative = alternative, type = type)
ad <- alphaDisconfirmation(n, effsize, prior, postfalse, test = test, alternative = alternative, type = type)
ac
ad
n <- 10
effsize <- 0.2
prior <- 0.2
posttrue <- 0.3
postfalse <- 0.1
test <- "anova"
alternative <- "greater"
type <- "one.sample"
ac <- alphaConfirmation(n, effsize, prior, posttrue, test = test, alternative = alternative, type = type)
ad <- alphaDisconfirmation(n, effsize, prior, postfalse, test = test, alternative = alternative, type = type)
n <- 20
effsize <- 0.2
prior <- 0.2
posttrue <- 0.3
postfalse <- 0.1
test <- "anova"
alternative <- "greater"
type <- "one.sample"
ac <- alphaConfirmation(n, effsize, prior, posttrue, test = test, alternative = alternative, type = type)
ad <- alphaDisconfirmation(n, effsize, prior, postfalse, test = test, alternative = alternative, type = type)
ad
pp <- probpower(effsize, prior, postfalse, posttrue, test = test, alternative = alternative, type = type)
ia <- idealalpha(n, effsize, prior, test = test, alternative = alternative, type = type)
pp <- probpower(effsize, prior, postfalse, posttrue, test = test, alternative = alternative, type = type)
ia <- idealalpha(n, effsize, prior, test = test, alternative = alternative, type = type)
expect_equal(round(postConfirm(ac$power,ac$alpha,  prior), digits = 1), posttrue)
ac <- alphaConfirmation(n, effsize, prior, posttrue, test = test, alternative = alternative, type = type)
expect_equal(round(postDisconfirm(ad$power, ad$alpha, prior), digits =1), postfalse)
expect_equal(round(postConfirm(pp$power,pp$alpha,  prior), digits =1), posttrue)
expect_equal(round(postDisconfirm(pp$power,pp$alpha,  prior), digits =1), postfalse)
expect_equal(round(information(postConfirm(ia$power, ia$alpha, prior),postDisconfirm(ia$power, ia$alpha, prior),ia$power, ia$alpha, prior),2), round(ia$Learning, digits = 2))
n <- 20
effsize <- 0.2
prior <- 0.5
posttrue <- 0.95
postfalse <- 0.05
test <- "anova"
alternative <- "greater"
type <- "one.sample"
ac <- alphaConfirmation(n, effsize, prior, posttrue, test = test, alternative = alternative, type = type)
ad <- alphaDisconfirmation(n, effsize, prior, postfalse, test = test, alternative = alternative, type = type)
pp <- probpower(effsize, prior, postfalse, posttrue, test = test, alternative = alternative, type = type)
pp
ia <- idealalpha(n, effsize, prior, test = test, alternative = alternative, type = type)
n <- 20
effsize <- 0.7
prior <- 0.5
posttrue <- 0.95
postfalse <- 0.05
test <- "anova"
alternative <- "greater"
type <- "one.sample"
ac <- alphaConfirmation(n, effsize, prior, posttrue, test = test, alternative = alternative, type = type)
ad <- alphaDisconfirmation(n, effsize, prior, postfalse, test = test, alternative = alternative, type = type)
pp <- probpower(effsize, prior, postfalse, posttrue, test = test, alternative = alternative, type = type)
pp
ia <- idealalpha(n, effsize, prior, test = test, alternative = alternative, type = type)
n <- 20
effsize <- 0.9
prior <- 0.5
posttrue <- 0.95
postfalse <- 0.05
test <- "anova"
alternative <- "greater"
type <- "one.sample"
ac <- alphaConfirmation(n, effsize, prior, posttrue, test = test, alternative = alternative, type = type)
ad <- alphaDisconfirmation(n, effsize, prior, postfalse, test = test, alternative = alternative, type = type)
pp <- probpower(effsize, prior, postfalse, posttrue, test = test, alternative = alternative, type = type)
ia <- idealalpha(n, effsize, prior, test = test, alternative = alternative, type = type)
pp
debug(probpower)
pp <- probpower(effsize, prior, postfalse, posttrue, test = test, alternative = alternative, type = type)
d
undebug(probpower)
devtools::load_all()
ac <- alphaConfirmation(n, effsize, prior, posttrue, test = test, alternative = alternative, type = type)
ad <- alphaDisconfirmation(n, effsize, prior, postfalse, test = test, alternative = alternative, type = type)
pp <- probpower(effsize, prior, postfalse, posttrue, test = test, alternative = alternative, type = type)
devtools::load_all()
ac <- alphaConfirmation(n, effsize, prior, posttrue, test = test, alternative = alternative, type = type)
ad <- alphaDisconfirmation(n, effsize, prior, postfalse, test = test, alternative = alternative, type = type)
pp <- probpower(effsize, prior, postfalse, posttrue, test = test, alternative = alternative, type = type)
pp <- probpower(effsize, prior, postfalse, posttrue, test = test, alternative = alternative, type = type)
pp <- probpower(effsize, prior, postfalse, posttrue, test = test, alternative = alternative, type = type)
pp <- probpower(effsize, prior, postfalse, posttrue, test = test, alternative = alternative, type = type)
pp
debug(probpower)
undebug(probpower)
devtools::load_all()
ac <- alphaConfirmation(n, effsize, prior, posttrue, test = test, alternative = alternative, type = type)
ad <- alphaDisconfirmation(n, effsize, prior, postfalse, test = test, alternative = alternative, type = type)
pp <- probpower(effsize, prior, postfalse, posttrue, test = test, alternative = alternative, type = type)
pp
devtools::load_all()
n <- 20
effsize <- 0.9
prior <- 0.5
posttrue <- 0.95
postfalse <- 0.05
test <- "anova"
alternative <- "greater"
type <- "one.sample"
pp <- probpower(effsize, prior, postfalse, posttrue, test = test, alternative = alternative, type = type)
devtools::load_all()
n <- 20
effsize <- 0.9
prior <- 0.5
posttrue <- 0.95
postfalse <- 0.05
test <- "anova"
alternative <- "greater"
type <- "one.sample"
ac <- alphaConfirmation(n, effsize, prior, posttrue, test = test, alternative = alternative, type = type)
ad <- alphaDisconfirmation(n, effsize, prior, postfalse, test = test, alternative = alternative, type = type)
pp <- probpower(effsize, prior, postfalse, posttrue, test = test, alternative = alternative, type = type)
pp
n <- 20
effsize <- 0.2
prior <- 0.5
posttrue <- 0.95
postfalse <- 0.05
test <- "anova"
alternative <- "greater"
type <- "one.sample"
ac <- alphaConfirmation(n, effsize, prior, posttrue, test = test, alternative = alternative, type = type)
ad <- alphaDisconfirmation(n, effsize, prior, postfalse, test = test, alternative = alternative, type = type)
pp <- probpower(effsize, prior, postfalse, posttrue, test = test, alternative = alternative, type = type)
devtools::load_all()
pp <- probpower(effsize, prior, postfalse, posttrue, test = test, alternative = alternative, type = type)
devtools:::load_all()
n <- 20
effsize <- 0.2
prior <- 0.5
posttrue <- 0.95
postfalse <- 0.05
test <- "anova"
alternative <- "greater"
type <- "one.sample"
ac <- alphaConfirmation(n, effsize, prior, posttrue, test = test, alternative = alternative, type = type)
ad <- alphaDisconfirmation(n, effsize, prior, postfalse, test = test, alternative = alternative, type = type)
pp <- probpower(effsize, prior, postfalse, posttrue, test = test, alternative = alternative, type = type)
pp <- probpower(effsize, prior, postfalse, posttrue, test = test, alternative = alternative, type = type)
debug(probpower)
pp <- probpower(effsize, prior, postfalse, posttrue, test = test, alternative = alternative, type = type)
d
i
devtools::load_all()
n <- 20
effsize <- 0.2
prior <- 0.5
posttrue <- 0.95
postfalse <- 0.05
test <- "anova"
alternative <- "greater"
type <- "one.sample"
ac <- alphaConfirmation(n, effsize, prior, posttrue, test = test, alternative = alternative, type = type)
ad <- alphaDisconfirmation(n, effsize, prior, postfalse, test = test, alternative = alternative, type = type)
pp <- probpower(effsize, prior, postfalse, posttrue, test = test, alternative = alternative, type = type)
pp
n <- 20
effsize <- 0.9
prior <- 0.5
posttrue <- 0.95
postfalse <- 0.05
test <- "anova"
alternative <- "greater"
type <- "one.sample"
ac <- alphaConfirmation(n, effsize, prior, posttrue, test = test, alternative = alternative, type = type)
ad <- alphaDisconfirmation(n, effsize, prior, postfalse, test = test, alternative = alternative, type = type)
pp <- probpower(effsize, prior, postfalse, posttrue, test = test, alternative = alternative, type = type)
pp
effsize <- 0.2
prior <- 0.5
posttrue <- 0.95
postfalse <- 0.05
test <- "anova"
alternative <- "greater"
type <- "one.sample"
ac <- alphaConfirmation(n, effsize, prior, posttrue, test = test, alternative = alternative, type = type)
ad <- alphaDisconfirmation(n, effsize, prior, postfalse, test = test, alternative = alternative, type = type)
pp <- probpower(effsize, prior, postfalse, posttrue, test = test, alternative = alternative, type = type)
pp
ia <- idealalpha(n, effsize, prior, test = test, alternative = alternative, type = type)
expect_equal(round(postConfirm(ac$power,ac$alpha,  prior), digits = 1), posttrue)
expect_equal(round(postDisconfirm(ad$power, ad$alpha, prior), digits =1), postfalse)
expect_equal(round(postConfirm(pp$power,pp$alpha,  prior), digits =1), posttrue)
expect_equal(round(postDisconfirm(pp$power,pp$alpha,  prior), digits =1), postfalse)
expect_equal(round(information(postConfirm(ia$power, ia$alpha, prior),postDisconfirm(ia$power, ia$alpha, prior),ia$power, ia$alpha, prior),2), round(ia$Learning, digits = 2))
n <- 100
effsize <- 0.2
prior <- 0.5
posttrue <- 0.95
postfalse <- 0.05
test <- "anova"
alternative <- "greater"
type <- "one.sample"
ac <- alphaConfirmation(n, effsize, prior, posttrue, test = test, alternative = alternative, type = type)
ad <- alphaDisconfirmation(n, effsize, prior, postfalse, test = test, alternative = alternative, type = type)
pp <- probpower(effsize, prior, postfalse, posttrue, test = test, alternative = alternative, type = type)
ia <- idealalpha(n, effsize, prior, test = test, alternative = alternative, type = type)
pp
ac
ac
ad
ia
n <- 100
effsize <- 0.2
prior <- 0.5
posttrue <- 0.95
postfalse <- 0.05
test <- "correlation"
alternative <- "greater"
type <- "one.sample"
ac <- alphaConfirmation(n, effsize, prior, posttrue, test = test, alternative = alternative, type = type)
n <- 100
effsize <- 0.2
prior <- 0.5
posttrue <- 0.95
postfalse <- 0.05
test <- "anova"
alternative <- "greater"
type <- "one.sample"
ac <- alphaConfirmation(n, effsize, prior, posttrue, test = test, alternative = alternative, type = type)
ad <- alphaDisconfirmation(n, effsize, prior, postfalse, test = test, alternative = alternative, type = type)
pp <- probpower(effsize, prior, postfalse, posttrue, test = test, alternative = alternative, type = type)
ia <- idealalpha(n, effsize, prior, test = test, alternative = alternative, type = type)
expect_equal(round(postConfirm(ac$power,ac$alpha,  prior), digits = 1), posttrue)
expect_equal(round(postDisconfirm(ad$power, ad$alpha, prior), digits =1), postfalse)
ia <- idealalpha(n, effsize, prior, test = test, alternative = alternative, type = type)
ia
devtools::load_all()
devtools::document()
n <- 100
effsize <- 0.2
prior <- 0.5
posttrue <- 0.95
postfalse <- 0.05
test <- "anova"
alternative <- "greater"
type <- "one.sample"
ac <- alphaConfirmation(n, effsize, prior, posttrue, test = test, alternative = alternative, type = type)
ad <- alphaDisconfirmation(n, effsize, prior, postfalse, test = test, alternative = alternative, type = type)
pp <- probPower(effsize, prior, postfalse, posttrue, test = test, alternative = alternative, type = type)
probPower
pp
ia <- idealAlpha(n, effsize, prior, test = test, alternative = alternative, type = type)
expect_equal(round(postConfirm(ac$power,ac$alpha,  prior), digits = 1), posttrue)
expect_equal(round(postDisconfirm(ad$power, ad$alpha, prior), digits =1), postfalse)
ac <- alphaConfirmation(n, effsize, prior, posttrue, test = test, alternative = alternative, type = type)
ac
expect_equal(round(postConfirm(ac$power,ac$alpha,  prior), digits = 1), posttrue)
postConfirm(ac$power,ac$alpha,  prior)
expect_equal(round(postConfirm(ac$power,ac$alpha,  prior), digits = 2), posttrue)
expect_equal(round(postDisconfirm(ad$power, ad$alpha, prior), digits =1), postfalse)
expect_equal(round(postDisconfirm(ad$power, ad$alpha, prior), digits =2), postfalse)
expect_equal(round(postConfirm(pp$power,pp$alpha,  prior), digits =1), posttrue)
expect_equal(round(postConfirm(pp$power,pp$alpha,  prior), digits =2), posttrue)
expect_equal(round(postDisconfirm(pp$power,pp$alpha,  prior), digits =2), postfalse)
expect_equal(round(information(postConfirm(ia$power, ia$alpha, prior),postDisconfirm(ia$power, ia$alpha, prior),ia$power, ia$alpha, prior),2), round(ia$Learning, digits = 2))
devtools::test()
devtools::test()
n <- 100
effsize <- 0.7
prior <- 0.5
posttrue <- 0.95
postfalse <- 0.05
test <- "t-test"
alternative <- "greater"
type <- "one.sample"
ac <- alphaConfirmation(n, effsize, prior, posttrue, test = test, alternative = alternative, type = type)
ad <- alphaDisconfirmation(n, effsize, prior, postfalse, test = test, alternative = alternative, type = type)
ad
ac
pp <- probPower(effsize, prior, postfalse, posttrue, test = test, alternative = alternative, type = type)
pp
ia
ia <- idealAlpha(n, effsize, prior, test = test, alternative = alternative, type = type)
ia
expect_equal(round(postConfirm(ac$power,ac$alpha,  prior), digits = 2), posttrue)
expect_equal(round(postDisconfirm(ad$power, ad$alpha, prior), digits =2), postfalse)
expect_equal(round(postConfirm(pp$power,pp$alpha,  prior), digits =2), posttrue)
expect_equal(round(postDisconfirm(pp$power,pp$alpha,  prior), digits =2), postfalse)
expect_equal(round(information(postConfirm(ia$power, ia$alpha, prior),postDisconfirm(ia$power, ia$alpha, prior),ia$power, ia$alpha, prior),2), round(ia$Learning, digits = 2))
n <- 50
effsize <- 0.2
prior <- 0.5
posttrue <- 0.95
postfalse <- 0.05
test <- "t-test"
alternative <- "greater"
type <- "one.sample"
ac <- alphaConfirmation(n, effsize, prior, posttrue, test = test, alternative = alternative, type = type)
ad <- alphaDisconfirmation(n, effsize, prior, postfalse, test = test, alternative = alternative, type = type)
pp <- probPower(effsize, prior, postfalse, posttrue, test = test, alternative = alternative, type = type)
ia <- idealAlpha(n, effsize, prior, test = test, alternative = alternative, type = type)
expect_equal(round(postConfirm(ac$power,ac$alpha,  prior), digits = 2), posttrue)
expect_equal(round(postDisconfirm(ad$power, ad$alpha, prior), digits =2), postfalse)
expect_equal(round(postConfirm(pp$power,pp$alpha,  prior), digits =2), posttrue)
expect_equal(round(postDisconfirm(pp$power,pp$alpha,  prior), digits =2), postfalse)
expect_equal(round(information(postConfirm(ia$power, ia$alpha, prior),postDisconfirm(ia$power, ia$alpha, prior),ia$power, ia$alpha, prior),2), round(ia$Learning, digits = 2))
devtools::test()
devtools::test()
n <- 40
effsize <- 0.2
prior <- 0.5
posttrue <- 0.95
postfalse <- 0.05
test <- "t-test"
alternative <- "greater"
type <- "one.sample"
ac <- alphaConfirmation(n, effsize, prior, posttrue, test = test, alternative = alternative, type = type)
ad <- alphaDisconfirmation(n, effsize, prior, postfalse, test = test, alternative = alternative, type = type)
pp <- probPower(effsize, prior, postfalse, posttrue, test = test, alternative = alternative, type = type)
pp
ia <- idealAlpha(n, effsize, prior, test = test, alternative = alternative, type = type)
expect_equal(round(postConfirm(ac$power,ac$alpha,  prior), digits = 2), posttrue)
expect_equal(round(postDisconfirm(ad$power, ad$alpha, prior), digits =2), postfalse)
expect_equal(round(postConfirm(pp$power,pp$alpha,  prior), digits =2), posttrue)
ac
ad
pp
ia
ac
ad
shiny::runApp('C:/Users/Maximilian Maier/Desktop/PaperWriting/IdealAlpha/Optimize_Alpha/OptimizeAlpha')
runApp('C:/Users/Maximilian Maier/Desktop/PaperWriting/IdealAlpha/Optimize_Alpha/OptimizeAlpha')
runApp('C:/Users/Maximilian Maier/Desktop/PaperWriting/IdealAlpha/Optimize_Alpha/OptimizeAlpha')
runApp('C:/Users/Maximilian Maier/Desktop/PaperWriting/IdealAlpha/Optimize_Alpha/OptimizeAlpha')
library(shiny)
library(pwr)
library(shinydashboard)
install.packages(shinydashboard)
install.packages("shinydashboard")
library(shiny)
library(pwr)
library(shinydashboard)
runApp('C:/Users/Maximilian Maier/Desktop/PaperWriting/IdealAlpha/Optimize_Alpha/OptimizeAlpha')
runApp('C:/Users/Maximilian Maier/Desktop/PaperWriting/IdealAlpha/Optimize_Alpha/OptimizeAlpha')
runApp('C:/Users/Maximilian Maier/Desktop/PaperWriting/IdealAlpha/Optimize_Alpha/OptimizeAlpha')
runApp('C:/Users/Maximilian Maier/Desktop/PaperWriting/IdealAlpha/Optimize_Alpha/OptimizeAlpha')
runApp('C:/Users/Maximilian Maier/Desktop/PaperWriting/IdealAlpha/Optimize_Alpha/OptimizeAlpha')
runApp('C:/Users/Maximilian Maier/Desktop/PaperWriting/IdealAlpha/Optimize_Alpha/OptimizeAlpha')
runApp('C:/Users/Maximilian Maier/Desktop/PaperWriting/IdealAlpha/Optimize_Alpha/OptimizeAlpha')
runApp('C:/Users/Maximilian Maier/Desktop/PaperWriting/IdealAlpha/Optimize_Alpha/OptimizeAlpha')
runApp('C:/Users/Maximilian Maier/Desktop/PaperWriting/IdealAlpha/Optimize_Alpha/OptimizeAlpha')
runApp('C:/Users/Maximilian Maier/Desktop/PaperWriting/IdealAlpha/Optimize_Alpha/OptimizeAlpha')
runApp('C:/Users/Maximilian Maier/Desktop/PaperWriting/IdealAlpha/Optimize_Alpha/OptimizeAlpha')
runApp('C:/Users/Maximilian Maier/Desktop/PaperWriting/IdealAlpha/Optimize_Alpha/OptimizeAlpha')
runApp('C:/Users/Maximilian Maier/Desktop/PaperWriting/IdealAlpha/Optimize_Alpha/OptimizeAlpha')
runApp('C:/Users/Maximilian Maier/Desktop/PaperWriting/IdealAlpha/Optimize_Alpha/OptimizeAlpha')
runApp('C:/Users/Maximilian Maier/Desktop/PaperWriting/IdealAlpha/Optimize_Alpha/OptimizeAlpha')
runApp('C:/Users/Maximilian Maier/Desktop/PaperWriting/IdealAlpha/Optimize_Alpha/OptimizeAlpha')
runApp('C:/Users/Maximilian Maier/Desktop/PaperWriting/IdealAlpha/Optimize_Alpha/OptimizeAlpha')
runApp('C:/Users/Maximilian Maier/Desktop/PaperWriting/IdealAlpha/Optimize_Alpha/OptimizeAlpha')
runApp('C:/Users/Maximilian Maier/Desktop/PaperWriting/IdealAlpha/Optimize_Alpha/OptimizeAlpha')
runApp('C:/Users/Maximilian Maier/Desktop/PaperWriting/IdealAlpha/Optimize_Alpha/OptimizeAlpha')
runApp('C:/Users/Maximilian Maier/Desktop/PaperWriting/IdealAlpha/Optimize_Alpha/OptimizeAlpha')
runApp('C:/Users/Maximilian Maier/Desktop/PaperWriting/IdealAlpha/Optimize_Alpha/OptimizeAlpha')
runApp('C:/Users/Maximilian Maier/Desktop/PaperWriting/IdealAlpha/Optimize_Alpha/OptimizeAlpha')
runApp('C:/Users/Maximilian Maier/Desktop/PaperWriting/IdealAlpha/Optimize_Alpha/OptimizeAlpha')
runApp('C:/Users/Maximilian Maier/Desktop/PaperWriting/IdealAlpha/Optimize_Alpha/OptimizeAlpha')
runApp('C:/Users/Maximilian Maier/Desktop/PaperWriting/IdealAlpha/Optimize_Alpha/OptimizeAlpha')
runApp('C:/Users/Maximilian Maier/Desktop/PaperWriting/IdealAlpha/Optimize_Alpha/OptimizeAlpha')
runApp('C:/Users/Maximilian Maier/Desktop/PaperWriting/IdealAlpha/Optimize_Alpha/OptimizeAlpha')
runApp('C:/Users/Maximilian Maier/Desktop/PaperWriting/IdealAlpha/Optimize_Alpha/OptimizeAlpha')
runApp('C:/Users/Maximilian Maier/Desktop/PaperWriting/IdealAlpha/Optimize_Alpha/OptimizeAlpha')
runApp('C:/Users/Maximilian Maier/Desktop/PaperWriting/IdealAlpha/Optimize_Alpha/OptimizeAlpha')
runApp('C:/Users/Maximilian Maier/Desktop/PaperWriting/IdealAlpha/Optimize_Alpha/OptimizeAlpha')
runApp('C:/Users/Maximilian Maier/Desktop/PaperWriting/IdealAlpha/Optimize_Alpha/OptimizeAlpha')
runApp('C:/Users/Maximilian Maier/Desktop/PaperWriting/IdealAlpha/Optimize_Alpha/OptimizeAlpha')
runApp('C:/Users/Maximilian Maier/Desktop/PaperWriting/IdealAlpha/Optimize_Alpha/OptimizeAlpha')
runApp('C:/Users/Maximilian Maier/Desktop/PaperWriting/IdealAlpha/Optimize_Alpha/OptimizeAlpha')
runApp('C:/Users/Maximilian Maier/Desktop/PaperWriting/IdealAlpha/Optimize_Alpha/OptimizeAlpha')
runApp('C:/Users/Maximilian Maier/Desktop/PaperWriting/IdealAlpha/Optimize_Alpha/OptimizeAlpha')
runApp('C:/Users/Maximilian Maier/Desktop/PaperWriting/IdealAlpha/Optimize_Alpha/OptimizeAlpha')
runApp('C:/Users/Maximilian Maier/Desktop/PaperWriting/IdealAlpha/Optimize_Alpha/OptimizeAlpha')
runApp('C:/Users/Maximilian Maier/Desktop/PaperWriting/IdealAlpha/Optimize_Alpha/OptimizeAlpha')
runApp('C:/Users/Maximilian Maier/Desktop/PaperWriting/IdealAlpha/Optimize_Alpha/OptimizeAlpha')
runApp('C:/Users/Maximilian Maier/Desktop/PaperWriting/IdealAlpha/Optimize_Alpha/OptimizeAlpha')
runApp('C:/Users/Maximilian Maier/Desktop/PaperWriting/IdealAlpha/Optimize_Alpha/OptimizeAlpha')
runApp('C:/Users/Maximilian Maier/Desktop/PaperWriting/IdealAlpha/Optimize_Alpha/OptimizeAlpha')
runApp('C:/Users/Maximilian Maier/Desktop/PaperWriting/IdealAlpha/Optimize_Alpha/OptimizeAlpha')
runApp('C:/Users/Maximilian Maier/Desktop/PaperWriting/IdealAlpha/Optimize_Alpha/OptimizeAlpha')
runApp('C:/Users/Maximilian Maier/Desktop/PaperWriting/IdealAlpha/Optimize_Alpha/OptimizeAlpha')
runApp('C:/Users/Maximilian Maier/Desktop/PaperWriting/IdealAlpha/Optimize_Alpha/OptimizeAlpha')
runApp('C:/Users/Maximilian Maier/Desktop/PaperWriting/IdealAlpha/Optimize_Alpha/OptimizeAlpha')
runApp('C:/Users/Maximilian Maier/Desktop/PaperWriting/IdealAlpha/Optimize_Alpha/OptimizeAlpha')
runApp('C:/Users/Maximilian Maier/Desktop/PaperWriting/IdealAlpha/Optimize_Alpha/OptimizeAlpha')
?passwordInput
runApp('C:/Users/Maximilian Maier/Desktop/PaperWriting/IdealAlpha/Optimize_Alpha/OptimizeAlpha')
runApp('C:/Users/Maximilian Maier/Desktop/PaperWriting/IdealAlpha/Optimize_Alpha/OptimizeAlpha')
runApp('C:/Users/Maximilian Maier/Desktop/PaperWriting/IdealAlpha/Optimize_Alpha/OptimizeAlpha')
runApp('C:/Users/Maximilian Maier/Desktop/PaperWriting/IdealAlpha/Optimize_Alpha/OptimizeAlpha')
runApp('C:/Users/Maximilian Maier/Desktop/PaperWriting/IdealAlpha/Optimize_Alpha/OptimizeAlpha')
runApp('C:/Users/Maximilian Maier/Desktop/PaperWriting/IdealAlpha/Optimize_Alpha/OptimizeAlpha')
runApp('C:/Users/Maximilian Maier/Desktop/PaperWriting/IdealAlpha/Optimize_Alpha/OptimizeAlpha')
runApp('C:/Users/Maximilian Maier/Desktop/PaperWriting/IdealAlpha/Optimize_Alpha/OptimizeAlpha')
runApp('C:/Users/Maximilian Maier/Desktop/PaperWriting/IdealAlpha/Optimize_Alpha/OptimizeAlpha')
runApp('C:/Users/Maximilian Maier/Desktop/PaperWriting/IdealAlpha/Optimize_Alpha/OptimizeAlpha')
runApp('C:/Users/Maximilian Maier/Desktop/PaperWriting/IdealAlpha/Optimize_Alpha/OptimizeAlpha')
install.packages('rsconnect')
install.packages("rsconnect")
rsconnect::setAccountInfo(name='maxma1er',
token='6B054ED1652610CD5A061880F77C770E',
secret='gGsodF8fXq5z6kXbGwG3qAK3lmKGUnaBa0MNx9pH')
shiny::runApp('C:/Users/Maximilian Maier/Desktop/PaperWriting/IdealAlpha/Optimize_Alpha/OptimizeAlpha')
runApp('C:/Users/Maximilian Maier/Desktop/PaperWriting/IdealAlpha/Optimize_Alpha/app')
