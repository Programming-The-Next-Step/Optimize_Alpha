#plot
plot(alpha,info, ylab = "Expected Change in Belief", xlab = "Signifcance Level", type = "l", main = paste("Alpha for",posttrue, "Probability after Significance") , xlim = c(0,1), axes = F, ylim =c(0,round(maxinf + 0.005, digits = 2)))
abline(v = 0.05, col = "red")
abline(v = d$alpha, col = "blue")
axis(side=2, at=c(seq(0,(maxinf+0.01),0.01)))
axis(side=1, at=c(seq(0,1,0.05)))
mtext(side =3, paste("Alpha = ", round(d$alpha, digits = 2), " Power = ", round(d$power, digits = 2), "Learning =", round(d$info*100, digits = 2), "%"))
return(d)
}
#AlphaDisconfirmation: Indicate the posterior probability you want after a negative result
#The function will return the alpha level needed to achieve this posterior probability after testing
#' The user specifies the intended probability of the hypothesis after a non significant test result and the alpha level is adjusted accordingly.
#' @param n Number of participants per group.
#' @param effsize Effect size corresponding to statistical test. D for t-test, r for correlation and f for anova.
#' @param prior Prior probability of H1 being true.
#' @param postfalse The posterior probability that is aimed for if the test is not significant (should be higher than prior).
#' @param test Kind of statistical test. Can be "t-test", "anova" and "correlation".
#' @param type Indicate whether it is a one.sample, or two.sample test (for t-test only).
#' @param alternative Indicate whether the alternative is "two.sided", "less", or "greater".
#' @param k Number of groups for anova.
#' @examples alphaConfirmation(100, 0.3, 0.2, 0.5, test = "correlation").
#'
#' @return A data frame with the alpha level, the  power, the expected correct change in belief in percent and posterior probability after a significant result.
#' @export
alphaDisconfirmation <- function(n, effsize, prior, postfalse, test = "t-test", type = "two.sample", alternative = "two.sided", k = 4)
{
if(postfalse > prior)
{
stop("Prior must be higher than posterior")
}
alpha   <- seq(0,1,.00001)
power  <- get_power(alpha, effsize, n, test = test, type = type, alternative = alternative, k = k) #power.prop.test(n, p1 = 0.8, p2 = 1, sig.level = alpha)$power
confirm <- postconfirm(power, alpha, prior)
disconf <- postdisconfirm(power, alpha, prior)
info <- information(confirm, disconf, power, alpha, prior)
df <- as.data.frame(cbind(alpha,power,info, disconf))
#f <- max(na.omit(info))
maxinf <- max(na.omit(info))
postd <- as.data.frame(subset(df, disconf > ))
postd <- min(postd$disconf)
d <- subset(df, disconf == postd)
#plot
plot(alpha,info, ylab = "Expected Change in Belief", xlab = "Signifcance Level", type = "l", main = paste("Alpha for",round(postd, digits = 2), "Probability after Non-Significance") , xlim = c(0,1), axes = F, ylim =c(0,round(maxinf + 0.005, digits = 2)))
abline(v = 0.05, col = "red")
abline(v = d$alpha, col = "blue")
axis(side=2, at=c(seq(0,(maxinf+0.01),0.01)))
axis(side=1, at=c(seq(0,1,0.05)))
mtext(side =3, paste("Alpha = ", round(d$alpha, digits = 2), " Power = ", round(d$power, digits = 2), "Learning =", round(d$info*100, digits = 2), "%"))
return(d)
}
#Probability based power analysis: Set both the posterior probability after a positive result and the posterior probability after a negative result
#The function will calculate the required sample size and alplha level to achieve this.
#' The user specifies the intended probability of the hypothesis after a both a significant and non-significant test result and the alpha level is adjusted accordingly.
#' @param effsize Effect size corresponding to statistical test. D for t-test, r for correlation and f for anova.
#' @param prior Prior probability of H1 being true.
#' @param posttrue The posterior probability that is aimed for if the test is significant.
#' @param postfalse The posterior probability that is aimed for if the test is not significant (should be higher than prior).
#' @param test Kind of statistical test. Can be "t-test", "anova" and "correlation".
#' @param type Indicate whether it is a one.sample, or two.sample test (for t-test only).
#' @param alternative Indicate whether the alternative is "two.sided", "less", or "greater".
#' @param k Number of groups for anova.
#' @examples alphaConfirmation(100, 0.3, 0.2, 0.5, test = "correlation").
#'
#' @return A data frame with the alpha level, the  power, the expected correct change in belief in percent and posterior probability after a significant result.
#' @export
#' @export
probpower <- function(effsize, prior, postfalse, posttrue, test = "t-test", type = "two.sample", alternative = "two.sided", k = 4)
{
if(! < prior | !prior < posttrue)
{
stop("Posterior after disconfirming needs to be smaller than prior, posterior after confirming larger")
}
alpha <- seq(.0001,1,.001)
#for 10-20 000 particpants calculte the alpha needed to achieve the posterior after a negative result
#stop the loop when there is an option that at the same time has the needed posterior probability after a positive result
for (i in 10:20000) {
power <- get_power(alpha, effsize, i, test, type, alternative, k)
#calculate power for all alphas for this sample size
disconf <- postdisconfirm(power, alpha, prior)
confirm <- postconfirm(power, alpha, prior)
info <- information(confirm, disconf, power, alpha, prior)
maxinf <- max(na.omit(info))
df <- as.data.frame(cbind(alpha,power, disconf, confirm, info))
postd <- as.data.frame(subset(df, disconf > postfalse))
postd <- min(postd$disconf)
d <- subset(df, disconf == postd)
d <- cbind(d, i)
postc <- d$confirm
if(postd > postfalse & postc > posttrue)
{
break
}
}
colnames(d) <- (c("alpha", "power", "disconf", "confirm", "info", "n"))
plot(df$alpha,df$info, ylab = "Expected Correct Change in Belief", xlab = "Signifcance Level", type = "l", main = paste("Probability bas Power Analysis - PosteriorConfirmation:",posttrue, "  Posterior Disconfirmation:", postfalse) , xlim = c(0,1), axes = F, ylim =c(0,round(maxinf + 0.005, digits = 2)))
abline(v = 0.05, col = "red")
abline(v = d$alpha, col = "blue")
axis(side=2, at=c(seq(0,(maxinf+0.01),0.01)))
axis(side=1, at=c(seq(0,1,0.05)))
mtext(side =3, paste("Sample Size", i, " Alpha = ", round(d$alpha, digits = 2), " Power = ", round(d$power, digits = 2), "Learning =", round(d$info*100, digits = 2), "%"))
return(d)
}
alphaDisconfirmation <- function(n, effsize, prior, postfalse, test = "t-test", type = "two.sample", alternative = "two.sided", k = 4)
{
if(postfalse > prior)
{
stop("Prior must be higher than posterior")
}
alpha   <- seq(0,1,.00001)
power  <- get_power(alpha, effsize, n, test = test, type = type, alternative = alternative, k = k) #power.prop.test(n, p1 = 0.8, p2 = 1, sig.level = alpha)$power
confirm <- postconfirm(power, alpha, prior)
disconf <- postdisconfirm(power, alpha, prior)
info <- information(confirm, disconf, power, alpha, prior)
df <- as.data.frame(cbind(alpha,power,info, disconf))
#f <- max(na.omit(info))
maxinf <- max(na.omit(info))
postd <- as.data.frame(subset(df, disconf > postfalse))
postd <- min(postd$disconf)
d <- subset(df, disconf == postd)
#plot
plot(alpha,info, ylab = "Expected Change in Belief", xlab = "Signifcance Level", type = "l", main = paste("Alpha for",round(postd, digits = 2), "Probability after Non-Significance") , xlim = c(0,1), axes = F, ylim =c(0,round(maxinf + 0.005, digits = 2)))
abline(v = 0.05, col = "red")
abline(v = d$alpha, col = "blue")
axis(side=2, at=c(seq(0,(maxinf+0.01),0.01)))
axis(side=1, at=c(seq(0,1,0.05)))
mtext(side =3, paste("Alpha = ", round(d$alpha, digits = 2), " Power = ", round(d$power, digits = 2), "Learning =", round(d$info*100, digits = 2), "%"))
return(d)
}
alphaDisconfirmation(100, 0.2, 0.5, 0.2)
alphaDisconfirmation(200, 0.2, 0.5, 0.2)
probpower <- function(effsize, prior, postfalse, posttrue, test = "t-test", type = "two.sample", alternative = "two.sided", k = 4)
{
if(! < prior | !prior < posttrue)
{
stop("Posterior after disconfirming needs to be smaller than prior, posterior after confirming larger")
}
alpha <- seq(.0001,1,.001)
#for 10-20 000 particpants calculte the alpha needed to achieve the posterior after a negative result
#stop the loop when there is an option that at the same time has the needed posterior probability after a positive result
for (i in 10:20000) {
power <- get_power(alpha, effsize, i, test, type, alternative, k)
#calculate power for all alphas for this sample size
disconf <- postdisconfirm(power, alpha, prior)
confirm <- postconfirm(power, alpha, prior)
info <- information(confirm, disconf, power, alpha, prior)
maxinf <- max(na.omit(info))
df <- as.data.frame(cbind(alpha,power, disconf, confirm, info))
postd <- as.data.frame(subset(df, disconf > postfalse))
postd <- min(postd$disconf)
d <- subset(df, disconf == postd)
d <- cbind(d, i)
postc <- d$confirm
if(postd > postfalse & postc > posttrue)
{
break
}
}
colnames(d) <- (c("alpha", "power", "disconf", "confirm", "info", "n"))
plot(df$alpha,df$info, ylab = "Expected Correct Change in Belief", xlab = "Signifcance Level", type = "l", main = paste("Probability bas Power Analysis - PosteriorConfirmation:",posttrue, "  Posterior Disconfirmation:", postfalse) , xlim = c(0,1), axes = F, ylim =c(0,round(maxinf + 0.005, digits = 2)))
abline(v = 0.05, col = "red")
abline(v = d$alpha, col = "blue")
axis(side=2, at=c(seq(0,(maxinf+0.01),0.01)))
axis(side=1, at=c(seq(0,1,0.05)))
mtext(side =3, paste("Sample Size", i, " Alpha = ", round(d$alpha, digits = 2), " Power = ", round(d$power, digits = 2), "Learning =", round(d$info*100, digits = 2), "%"))
return(d)
}
#' @param postfalse The posterior probability that is aimed for if the test is not significant (should be higher than prior).
#' @param test Kind of statistical test. Can be "t-test", "anova" and "correlation".
#' @param type Indicate whether it is a one.sample, or two.sample test (for t-test only).
#' @param alternative Indicate whether the alternative is "two.sided", "less", or "greater".
#' @param k Number of groups for anova.
#' @examples alphaConfirmation(100, 0.3, 0.2, 0.5, test = "correlation").
#'
#' @return A data frame with the alpha level, the  power, the expected correct change in belief in percent and posterior probability after a significant result.
#' @export
#' @export
probpower <- function(effsize, prior, postfalse, posttrue, test = "t-test", type = "two.sample", alternative = "two.sided", k = 4)
{
if(! < prior | !prior < posttrue)
{
stop("Posterior after disconfirming needs to be smaller than prior, posterior after confirming larger")
}
alpha <- seq(.0001,1,.001)
#for 10-20 000 particpants calculte the alpha needed to achieve the posterior after a negative result
#stop the loop when there is an option that at the same time has the needed posterior probability after a positive result
for (i in 10:20000) {
power <- get_power(alpha, effsize, i, test = test, type = type, alternative = alternative, k = k)
#calculate power for all alphas for this sample size
disconf <- postdisconfirm(power, alpha, prior)
confirm <- postconfirm(power, alpha, prior)
info <- information(confirm, disconf, power, alpha, prior)
maxinf <- max(na.omit(info))
df <- as.data.frame(cbind(alpha,power, disconf, confirm, info))
postd <- as.data.frame(subset(df, disconf > postfalse))
postd <- min(postd$disconf)
d <- subset(df, disconf == postd)
d <- cbind(d, i)
postc <- d$confirm
if(postd > postfalse & postc > posttrue)
{
break
}
}
colnames(d) <- (c("alpha", "power", "disconf", "confirm", "info", "n"))
plot(df$alpha,df$info, ylab = "Expected Correct Change in Belief", xlab = "Signifcance Level", type = "l", main = paste("Probability bas Power Analysis - PosteriorConfirmation:",posttrue, "  Posterior Disconfirmation:", postfalse) , xlim = c(0,1), axes = F, ylim =c(0,round(maxinf + 0.005, digits = 2)))
abline(v = 0.05, col = "red")
abline(v = d$alpha, col = "blue")
axis(side=2, at=c(seq(0,(maxinf+0.01),0.01)))
axis(side=1, at=c(seq(0,1,0.05)))
mtext(side =3, paste("Sample Size", i, " Alpha = ", round(d$alpha, digits = 2), " Power = ", round(d$power, digits = 2), "Learning =", round(d$info*100, digits = 2), "%"))
return(d)
}
#' @param postfalse The posterior probability that is aimed for if the test is not significant (should be higher than prior).
#' @param test Kind of statistical test. Can be "t-test", "anova" and "correlation".
#' @param type Indicate whether it is a one.sample, or two.sample test (for t-test only).
#' @param alternative Indicate whether the alternative is "two.sided", "less", or "greater".
#' @param k Number of groups for anova.
#' @examples alphaConfirmation(100, 0.3, 0.2, 0.5, test = "correlation").
#'
#' @return A data frame with the alpha level, the  power, the expected correct change in belief in percent and posterior probability after a significant result.
#' @export
#' @export
probpower <- function(effsize, prior, postfalse, posttrue, test = "t-test", type = "two.sample", alternative = "two.sided", k = 4)
{
if(!postfalse < prior | !prior < posttrue)
{
stop("Posterior after disconfirming needs to be smaller than prior, posterior after confirming larger")
}
alpha <- seq(.0001,1,.001)
#for 10-20 000 particpants calculte the alpha needed to achieve the posterior after a negative result
#stop the loop when there is an option that at the same time has the needed posterior probability after a positive result
for (i in 10:20000) {
power <- get_power(alpha, effsize, i, test = test, type = type, alternative = alternative, k = k)
#calculate power for all alphas for this sample size
disconf <- postdisconfirm(power, alpha, prior)
confirm <- postconfirm(power, alpha, prior)
info <- information(confirm, disconf, power, alpha, prior)
maxinf <- max(na.omit(info))
df <- as.data.frame(cbind(alpha,power, disconf, confirm, info))
postd <- as.data.frame(subset(df, disconf > postfalse))
postd <- min(postd$disconf)
d <- subset(df, disconf == postd)
d <- cbind(d, i)
postc <- d$confirm
if(postd > postfalse & postc > posttrue)
{
break
}
}
colnames(d) <- (c("alpha", "power", "disconf", "confirm", "info", "n"))
plot(df$alpha,df$info, ylab = "Expected Correct Change in Belief", xlab = "Signifcance Level", type = "l", main = paste("Probability bas Power Analysis - PosteriorConfirmation:",posttrue, "  Posterior Disconfirmation:", postfalse) , xlim = c(0,1), axes = F, ylim =c(0,round(maxinf + 0.005, digits = 2)))
abline(v = 0.05, col = "red")
abline(v = d$alpha, col = "blue")
axis(side=2, at=c(seq(0,(maxinf+0.01),0.01)))
axis(side=1, at=c(seq(0,1,0.05)))
mtext(side =3, paste("Sample Size", i, " Alpha = ", round(d$alpha, digits = 2), " Power = ", round(d$power, digits = 2), "Learning =", round(d$info*100, digits = 2), "%"))
return(d)
}
probpower(0.3, 0.5, 0.2, 0.8)
#calculate the probability that the hypothesis is true, after a nonsignificant finding
#' @export
devtools::document()
setwd("C:/Users/Maximilian Maier/Desktop/PaperWriting/IdealAlpha/Optimize_Alpha")
devtools::document()
setwd("C:/Users/Maximilian Maier/Desktop/PaperWriting/IdealAlpha/Package/idealalphaPackage")
devtools::document()
devtools::load_all()=
devtools::load_all()
devtools::load_all()
?postconfirm
?postdisconfirm
?idealalpha
?OptimizeR
?idealalphaPackage
?OptimizeR
devtools::document()
?OptimizeR
devtools::document()
?OptimizeR
devtools::document()
?OptimizeR
?idealalpha
example("idealalpha")
examples("idealalpha")
devtools::document()
?OptimizeR
?OptimizeR
devtools::document()
?OptimizeR
devtools::document()
?OptimizeR
usethis::use_testthat()
usethis::use_test("OptimizeR")
library(OptimizeR)
ac <- alphaConfirmation(n, effsize, prior, posttrue)
n <- 100
effsize <- 0.5
prior <- 0.5
posttrue <- 0.2
postfalse <- 0.8
ac <- alphaConfirmation(n, effsize, prior, posttrue)
n <- 100
effsize <- 0.5
prior <- 0.5
posttrue <- 0.8
postfalse <- 0.2
ac <- alphaConfirmation(n, effsize, prior, posttrue)
context("Core OptimizeR functionality")
test_that("returned alpha is correct") {
n <- 100
effsize <- 0.5
prior <- 0.5
posttrue <- 0.8
postfalse <- 0.2
ac <- alphaConfirmation(n, effsize, prior, posttrue)
ad <- alphaDisconfirmation(n, effsize, prior, postfalse)
pp <- probpower(effsize, prior, postfalse, posttrue)
expect_equal(round(postconfirm(ac$alpha, ac$power, prior), digits =1), posttrue)
expect_equal(round(postdisconfirm(ad$alpha, ad$power, prior), digits =1), postfalse)
expect_equal(round(postconfirm(pp$alpha, pp$power, prior), digits =1), posttrue)
expect_equal(round(postdisconfirm(pp$alpha, pp$power, prior), digits =1), postfalse)
}
test_that("returned alpha is correct" {
n <- 100
effsize <- 0.5
prior <- 0.5
posttrue <- 0.8
postfalse <- 0.2
ac <- alphaConfirmation(n, effsize, prior, posttrue)
ad <- alphaDisconfirmation(n, effsize, prior, postfalse)
pp <- probpower(effsize, prior, postfalse, posttrue)
expect_equal(round(postconfirm(ac$alpha, ac$power, prior), digits =1), posttrue)
expect_equal(round(postdisconfirm(ad$alpha, ad$power, prior), digits =1), postfalse)
expect_equal(round(postconfirm(pp$alpha, pp$power, prior), digits =1), posttrue)
expect_equal(round(postdisconfirm(pp$alpha, pp$power, prior), digits =1), postfalse)
})
devtools::test()
library(OptimizeR)
context("Core OptimizeR functionality")
test_that('returned alpha is correct' {
n <- 100
effsize <- 0.5
prior <- 0.5
posttrue <- 0.8
postfalse <- 0.2
ac <- alphaConfirmation(n, effsize, prior, posttrue)
ad <- alphaDisconfirmation(n, effsize, prior, postfalse)
pp <- probpower(effsize, prior, postfalse, posttrue)
expect_equal(round(postconfirm(ac$alpha, ac$power, prior), digits =1), posttrue)
expect_equal(round(postdisconfirm(ad$alpha, ad$power, prior), digits =1), postfalse)
expect_equal(round(postconfirm(pp$alpha, pp$power, prior), digits =1), posttrue)
expect_equal(round(postdisconfirm(pp$alpha, pp$power, prior), digits =1), postfalse)
})
round(8.77, digits = 1)
n <- 100
effsize <- 0.5
prior <- 0.5
posttrue <- 0.8
postfalse <- 0.2
ac <- alphaConfirmation(n, effsize, prior, posttrue)
ad <- alphaDisconfirmation(n, effsize, prior, postfalse)
pp <- probpower(effsize, prior, postfalse, posttrue)
expect_equal(round(postconfirm(ac$alpha, ac$power, prior), digits =1), posttrue)
postconfirm(ac$alpha, ac$power, prior = )
postconfirm(ac$alpha, ac$power, prior)
n <- 100
effsize <- 0.5
prior <- 0.5
posttrue <- 0.8
postfalse <- 0.2
ac <- alphaConfirmation(n, effsize, prior, posttrue)
ad <- alphaDisconfirmation(n, effsize, prior, postfalse)
pp <- probpower(effsize, prior, postfalse, posttrue)
expect_equal(round(postconfirm(ac$power,ac$alpha,  prior), digits =1), posttrue)
expect_equal(round(postdisconfirm( ad$power, ad$alpha, prior), digits =1), postfalse)
expect_equal(round(postconfirm(pp$power,pp$alpha,  prior), digits =1), posttrue)
expect_equal(round(postdisconfirm(pp$power,pp$alpha,  prior), digits =1), postfalse)
devtools::test()
devtools::test()
devtools::load_all()
ia <- idealalpha(n, effsize, prior)
devtools::test()
ia <- idealalpha(n, effsize, prior)
ia$Learning
(information(postconfirm(ia$power, ia$alpha, prior),postdisconfirm(ia$power, ia$alpha, prior),ia$alpha, ia$power, prior)
information(postconfirm(ia$power, ia$alpha, prior),postdisconfirm(ia$power, ia$alpha, prior),ia$alpha, ia$power, prior)
information(postconfirm(ia$power, ia$alpha, prior),postdisconfirm(ia$power, ia$alpha, prior),ia$alpha, ia$power, prior)
information(postconfirm(ia$power, ia$alpha, prior),postdisconfirm(ia$power, ia$alpha, prior),ia$alpha, ia$power, prior)
postconfirm(ia$power, ia$alpha, prior)
information(postconfirm(ia$power, ia$alpha, prior),postdisconfirm(ia$power, ia$alpha, prior),ia$alpha, ia$power, prior)
information(postconfirm(ia$power, ia$alpha, prior),postdisconfirm(ia$power, ia$alpha, prior),ia$alpha, ia$power, prior)
information(postconfirm(ia$power, ia$alpha, prior),postdisconfirm(ia$power, ia$alpha, prior),ia$alpha, ia$power, prior)
information(postconfirm(ia$power, ia$alpha, prior),postdisconfirm(ia$power, ia$alpha, prior),ia$alpha, ia$power, prior)
information(postconfirm(ia$power, ia$alpha, prior),postdisconfirm(ia$power, ia$alpha, prior),ia$alpha, ia$power, prior)
information(postconfirm(ia$power, ia$alpha, prior),postdisconfirm(ia$power, ia$alpha, prior),ia$alpha, ia$power, prior)
information(postconfirm(ia$power, ia$alpha, prior),postdisconfirm(ia$power, ia$alpha, prior),ia$alpha, ia$power, prior)
information(postconfirm(ia$power, ia$alpha, prior),postdisconfirm(ia$power, ia$alpha, prior),ia$alpha, ia$power, prior)
information(postconfirm(ia$power, ia$alpha, prior),postdisconfirm(ia$power, ia$alpha, prior),ia$alpha, ia$power, prior)
round(information(postconfirm(ia$power, ia$alpha, prior),postdisconfirm(ia$power, ia$alpha, prior),ia$alpha, ia$power, prior),1)
ia <- idealalpha(n, effsize, prior)
devtools::test()
devtools::load_all()
test_that('returned alpha is correct', {
n <- 100
effsize <- 0.5
prior <- 0.5
posttrue <- 0.8
postfalse <- 0.2
ac <- alphaConfirmation(n, effsize, prior, posttrue)
ad <- alphaDisconfirmation(n, effsize, prior, postfalse)
pp <- probpower(effsize, prior, postfalse, posttrue)
ia <- idealalpha(n, effsize, prior)
expect_equal(round(postconfirm(ac$power,ac$alpha,  prior), digits =2), posttrue)
expect_equal(round(postdisconfirm( ad$power, ad$alpha, prior), digits =2), postfalse)
expect_equal(round(postconfirm(pp$power,pp$alpha,  prior), digits =2), posttrue)
expect_equal(round(postdisconfirm(pp$power,pp$alpha,  prior), digits =2), postfalse)
expect_equal(round(information(postconfirm(ia$power, ia$alpha, prior),postdisconfirm(ia$power, ia$alpha, prior),ia$power, ia$alpha, prior),2), round(ia$Learning, digits = 2))
})
devtools::test()
devtools::load_all()
devtools::test()
devtools::test()
devtools::test()
ac
postconfirm(ac$power,ac$alpha,  prior)
round(postconfirm(ac$power,ac$alpha,  prior), digits = 1)
devtools::test()
ad <- alphaDisconfirmation(n, effsize, prior, postfalse)
ad
postdisconfirm(ad$power, ad$alpha, prior)
library(OptimizeR)
context("Core OptimizeR functionality")
test_that('returned alpha is correct', {
n <- 100
effsize <- 1
prior <- 0.5
posttrue <- 0.8
postfalse <- 0.2
ac <- alphaConfirmation(n, effsize, prior, posttrue)
ad <- alphaDisconfirmation(n, effsize, prior, postfalse)
pp <- probpower(effsize, prior, postfalse, posttrue)
ia <- idealalpha(n, effsize, prior)
expect_equal(round(postconfirm(ac$power,ac$alpha,  prior), digits = 1), posttrue)
expect_equal(round(postdisconfirm(ad$power, ad$alpha, prior), digits =1), postfalse)
expect_equal(round(postconfirm(pp$power,pp$alpha,  prior), digits =1), posttrue)
expect_equal(round(postdisconfirm(pp$power,pp$alpha,  prior), digits =1), postfalse)
expect_equal(round(information(postconfirm(ia$power, ia$alpha, prior),postdisconfirm(ia$power, ia$alpha, prior),ia$power, ia$alpha, prior),2), round(ia$Learning, digits = 2))
})
postdisconfirm(ad$power, ad$alpha, prior)
expect_equal(round(postdisconfirm(ad$power, ad$alpha, prior), digits =1), postfalse)
round(postdisconfirm(ad$power, ad$alpha, prior), digits =1)
postfalse
postdisconfirm(ad$power, ad$alpha, prior)
load_all()
devtools::load_all()
devtools::test()
round(postdisconfirm(ad$power, ad$alpha, prior), digits =1)
postfalse
devtools::test()
n <- 100
effsize <- 1
prior <- 0.5
posttrue <- 0.8
postfalse <- 0.2
ad <- alphaDisconfirmation(n, effsize, prior, postfalse)
ad
ac <- alphaConfirmation(n, effsize, prior, posttrue)
ad <- alphaDisconfirmation(n, effsize, prior, postfalse)
pp <- probpower(effsize, prior, postfalse, posttrue)
ia <- idealalpha(n, effsize, prior)
ac
ad
pp
ia
n <- 100
effsize <- 1
prior <- 0.5
posttrue <- 0.8
postfalse <- 0.2
ac <- alphaConfirmation(n, effsize, prior, posttrue)
ad <- alphaDisconfirmation(n, effsize, prior, postfalse)
ad
devtools::load_all()
n <- 100
effsize <- 1
prior <- 0.5
posttrue <- 0.8
postfalse <- 0.2
ac <- alphaConfirmation(n, effsize, prior, posttrue)
ad <- alphaDisconfirmation(n, effsize, prior, postfalse)
ad
library(OptimizeR)
context("Core OptimizeR functionality")
test_that('returned alpha is correct', {
n <- 100
effsize <- 0.3
prior <- 0.5
posttrue <- 0.8
postfalse <- 0.2
ac <- alphaConfirmation(n, effsize, prior, posttrue)
ad <- alphaDisconfirmation(n, effsize, prior, postfalse)
pp <- probpower(effsize, prior, postfalse, posttrue)
ia <- idealalpha(n, effsize, prior)
expect_equal(round(postconfirm(ac$power,ac$alpha,  prior), digits = 1), posttrue)
expect_equal(round(postdisconfirm(ad$power, ad$alpha, prior), digits =1), postfalse)
expect_equal(round(postconfirm(pp$power,pp$alpha,  prior), digits =1), posttrue)
expect_equal(round(postdisconfirm(pp$power,pp$alpha,  prior), digits =1), postfalse)
expect_equal(round(information(postconfirm(ia$power, ia$alpha, prior),postdisconfirm(ia$power, ia$alpha, prior),ia$power, ia$alpha, prior),2), round(ia$Learning, digits = 2))
})
devtools::test()
devtools::load_all()
devtools::test()
